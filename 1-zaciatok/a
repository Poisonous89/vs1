#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

int segPins[7] = {2, 3, 4, 5, 6, 7, 8};
byte segPatterns[4][7] = {
  {1,1,1,1,1,1,0}, // 1 (A)
  {0,1,1,1,1,1,1}, // 2 (J)
  {1,1,1,1,0,0,1}, // 3 (Q)
  {1,1,1,0,0,1,1}  // 4 (K)
};
char cards[4] = {'A', 'J', 'Q', 'K'};

int buttonPin = 9;
int last = -1;

void setup() {
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);

  for (int i = 0; i < 7; i++) pinMode(segPins[i], OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);

  randomSeed(analogRead(A0));
  lcd.print("Press button");
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    delay(200); // debounce

    int i;
    do i = random(4); while (i == last);
    last = i;

    char c = cards[i];
    lcd.clear();
    lcd.print("Card: ");
    lcd.print(c);
    Serial.println(c);

    for (int j = 0; j < 7; j++)
      digitalWrite(segPins[j], segPatterns[i][j]);

    while (digitalRead(buttonPin) == LOW); // wait for release
  }
}







#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

int segPins[7] = {2, 3, 4, 5, 6, 7, 8};  // 7-segment piny A–G
byte segPatterns[4][7] = {
  {1,1,1,1,1,1,0}, // 1 = A
  {0,1,1,1,1,1,1}, // 2 = J
  {1,1,1,1,0,0,1}, // 3 = Q
  {1,1,1,0,0,1,1}  // 4 = K
};
char cards[4] = {'A', 'J', 'Q', 'K'};

int buttonPin = 9;
int last = -1;

void setup() {
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);

  for (int i = 0; i < 7; i++) pinMode(segPins[i], OUTPUT);
  pinMode(buttonPin, INPUT_PULLUP);  // tlačidlo do GND

  randomSeed(analogRead(A0));

  lcd.print("Stlac tlacidlo");
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {  // po stlačení
    delay(200); // debounce

    int i;
    do i = random(4); while (i == last);  // zabráni opakovaniu
    last = i;

    char c = cards[i];
    lcd.clear();
    lcd.print("Karta: ");
    lcd.print(c);
    Serial.print("Karta: ");
    Serial.println(c);

    for (int j = 0; j < 7; j++)
      digitalWrite(segPins[j], segPatterns[i][j]);  // zobraz číslo

    while (digitalRead(buttonPin) == LOW); // počkaj na uvoľnenie tlačidla
  }
}



#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

// 7-segmentové piny (A–G)
int segA = 2;
int segB = 3;
int segC = 4;
int segD = 5;
int segE = 6;
int segF = 7;
int segG = 8;

int buttonPin = 9;
int last = -1;

// 2D pole kariet: {písmeno, číslo}
char cards[4][2] = {
  {'A', '1'},
  {'J', '2'},
  {'Q', '3'},
  {'K', '4'}
};

void setup() {
  lcd.init();
  lcd.backlight();
  Serial.begin(9600);

  pinMode(segA, OUTPUT);
  pinMode(segB, OUTPUT);
  pinMode(segC, OUTPUT);
  pinMode(segD, OUTPUT);
  pinMode(segE, OUTPUT);
  pinMode(segF, OUTPUT);
  pinMode(segG, OUTPUT);

  pinMode(buttonPin, INPUT_PULLUP);
  randomSeed(analogRead(A0));

  lcd.print("Stlac tlacidlo");
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    delay(200); // debounce

    int i;
    do i = random(4); while (i == last);
    last = i;

    char card = cards[i][0];
    char num = cards[i][1];

    lcd.clear();
    lcd.print("Karta: ");
    lcd.print(card);
    Serial.print("Karta: ");
    Serial.println(card);

    showNumber(num);

    while (digitalRead(buttonPin) == LOW); // caka kym pusti tlacidlo
  }
}

void clearSegments() {
  digitalWrite(segA, LOW);
  digitalWrite(segB, LOW);
  digitalWrite(segC, LOW);
  digitalWrite(segD, LOW);
  digitalWrite(segE, LOW);
  digitalWrite(segF, LOW);
  digitalWrite(segG, LOW);
}

void showNumber(char n) {
  clearSegments();

  switch (n) {
    case '1': // 1
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      break;
    case '2': // 2
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segE, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case '3': // 3
      digitalWrite(segA, HIGH);
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segD, HIGH);
      digitalWrite(segG, HIGH);
      break;
    case '4': // 4
      digitalWrite(segB, HIGH);
      digitalWrite(segC, HIGH);
      digitalWrite(segF, HIGH);
      digitalWrite(segG, HIGH);
      break;
  }
}